package de.fayard.buildSrcLibs

import de.fayard.buildSrcLibs.BuildSrcLibsTask.Companion.findDependencies
import de.fayard.buildSrcLibs.internal.Case
import de.fayard.buildSrcLibs.internal.Deps
import de.fayard.buildSrcLibs.internal.PluginConfig
import de.fayard.buildSrcLibs.internal.checkModeAndNames
import de.fayard.refreshVersions.core.internal.OutputFile
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import org.gradle.util.GradleVersion

@Suppress("UnstableApiUsage")
open class VersionsCatalogTask : DefaultTask() {

    @TaskAction
    fun taskActionEnableSupport() {
        OutputFile.checkWhichFilesExist(project.rootDir)

        if (GradleVersion.current() < GradleVersion.version("7.0")) {
            error(
                """
                |Gradle versions catalogs are only supported in Gradle 7+
                |Upgrade first with this command
                |     ./gradlew wrapper --gradle-version 7.0
            """.trimMargin()
            )
        }
        val file =
            if (OutputFile.SETTINGS_GRADLE.existed) OutputFile.SETTINGS_GRADLE else OutputFile.SETTINGS_GRADLE_KTS
        val settingsText = file.readText(project)
        val alreadyConfigured = settingsText.lines().any { it.containsVersionsCatalogDeclaration() }
        if (!alreadyConfigured) {
            val newText = ("""
                |${settingsText}
                |// Enable Gradle's version catalog support https://docs.gradle.org/current/userguide/platforms.html
                |enableFeaturePreview("VERSION_CATALOGS")
                |""".trimMargin())
            file.writeText(newText, project)
            file.logFileWasModified()
        }

    }


    @TaskAction
    fun taskUpdateVersionsCatalog() {
        val catalog = OutputFile.GRADLE_VERSIONS_CATALOG

        val allDependencies = project.findDependencies()
        val resolvedUseFqdn: List<String> = PluginConfig.computeUseFqdnFor(
            libraries = allDependencies,
            configured = emptyList(),
            byDefault = PluginConfig.MEANING_LESS_NAMES
        )
        val deps: Deps = allDependencies.checkModeAndNames(resolvedUseFqdn, Case.camelCase)
        val currentText = if (catalog.existed) catalog.readText(project) else ""
        val newText = versionsCatalog(deps, currentText)
        catalog.writeText(newText, project)
        catalog.logFileWasModified()
    }

    companion object {
        internal fun parseTomlInSection(toml: String): Map<String, String> {
            val result = mutableMapOf<String, StringBuilder>()
            result["root"] = StringBuilder()
            var current: StringBuilder = result["root"]!!
            val lines = toml.lines()
            for ((index, line) in lines.withIndex()) {
                val trimmed = line.trim()
                val isSectionHeader = trimmed.startsWith("[") && trimmed.endsWith("]")
                if (isSectionHeader) {
                    val sectionName = trimmed.removePrefix("[").removeSuffix("]")
                    result[sectionName] = StringBuilder()
                    current = result[sectionName]!!
                } else {
                    current.append(line)
                    if (index != lines.lastIndex) current.append("\n")
                }
            }
            return result.mapValues { it.value.toString() }
        }

        internal fun tomlSectionsToString(sections: Map<String, String>): String = buildString {
            for ((header, content) in sections) {
                if (header != "root") append("[$header]\n")
                append(content)
            }
        }

        internal fun versionsCatalog(deps: Deps, currentText: String): String {
            val sections = parseTomlInSection(currentText).toMutableMap()
            if (sections["root"].isNullOrBlank()) {
                sections["root"] = """
                    ## Generated by $ ./gradlew refreshVersionsCatalog
                    """.trimIndent()
            }
            sections["libraries"] = versionsCatalogLibraries(deps)
            return tomlSectionsToString(sections)
        }

        internal fun versionsCatalogLibraries(deps: Deps) = buildString {
            deps.libraries.forEach {
                append(deps.names[it])
                append(" = \"")
                append(it.groupModuleUnderscore())
                append('"')
                append("\n")
            }
            append("\n")
        }

        internal fun String.containsVersionsCatalogDeclaration(): Boolean {
            return this.substringBefore("//").contains("enableFeaturePreview.*VERSION_CATALOGS".toRegex())
        }
    }
}

